/* eslint-disable react/prop-types */
import { jsPDF } from 'jspdf';
import 'jspdf-autotable';
import { toast } from 'react-hot-toast';
import axios from 'axios';
import { useContext, useState, forwardRef, useImperativeHandle } from 'react';
import { UserContext } from '../components/userContext';
import logo from '../assets/logo';

const PaymentGateway = forwardRef(({ amount }, ref) => {
    const { user } = useContext(UserContext);
    const [isModalOpen, setModalOpen] = useState(false);
    const [loading, setLoading] = useState(false); 

    const generatePDF = (paymentDetails, filename) => {
        const doc = new jsPDF();
        const pageWidth = doc.internal.pageSize.getWidth();
        const imgWidth = 80;
        const imgHeight = 20;
        const xPos = (pageWidth - imgWidth) / 2;
        const yPos = 10;

        doc.addImage(logo, 'PNG', xPos, yPos, imgWidth, imgHeight);
        const lineY = yPos + imgHeight + 5;
        doc.setDrawColor(0);
        doc.setLineWidth(0.5);
        doc.line(10, lineY, pageWidth - 10, lineY);

        let yPosition = lineY + 10;
        doc.setFontSize(16);
        doc.setTextColor(50, 50, 50);
        doc.text("Payment Confirmation", 10, yPosition);
        yPosition += 10;

        const tableData = [
            { label: "Order ID", value: paymentDetails.orderId },
            { label: "Type", value: paymentDetails.items },
            { label: "Email", value: paymentDetails.email },
            { label: "Phone", value: paymentDetails.phone },
            { label: "Address", value: paymentDetails.address },
            { label: "City", value: paymentDetails.city },
            { label: "Country", value: paymentDetails.country },
            { label: "Amount", value: `LKR ${paymentDetails.amount}` },
        ];

        const columns = [
            { header: 'Field', dataKey: 'label' },
            { header: 'Value', dataKey: 'value' }
        ];

        const rows = tableData.map(item => ({
            label: item.label,
            value: item.value,
        }));

        doc.autoTable({
            columns,
            body: rows,
            startY: yPosition,
            margin: { top: 20 },
        });

        const autoGenText = `This is an autogenerated PDF for ${paymentDetails.email} on ${new Date().toLocaleDateString()}`;
        const autoGenYPos = doc.internal.pageSize.height - 20;
        doc.setTextColor(150, 150, 150);
        doc.text(autoGenText, 10, autoGenYPos);
        doc.save(filename);
    };

    const initiatePayment = async () => {
        setLoading(true); 
        try {
            const response = await axios.get('http://localhost:5000/api/payment/');
            const responseData = response.data;

            const payment = {
                sandbox: true,
                merchant_id: responseData.merchantId,
                return_url: responseData.return_url,
                cancel_url: responseData.cancel_url,
                notify_url: responseData.notify_url,
                first_name: responseData.first_name,
                last_name: responseData.last_name,
                email: responseData.email,
                phone: responseData.phone,
                address: responseData.address,
                city: responseData.city,
                country: responseData.country,
                order_id: responseData.orderId,
                items: responseData.items,
                amount: amount,
                currency: responseData.currency,
                hash: responseData.hash,
            };

            window.payhere.onCompleted = async function (OrderID) {
                toast.success("Payment completed. OrderID: " + OrderID);
                try {
                    await axios.post('http://localhost:5000/api/transaction/update', {
                        userId: user.userId,
                        amount: amount,
                        status: 'Success',
                    });
                    toast.success("Wallet updated successfully!");

                    const paymentDetails = {
                        orderId: OrderID,
                        email: responseData.email,
                        phone: responseData.phone,
                        address: responseData.address,
                        city: responseData.city,
                        country: responseData.country,
                        amount: amount,
                        items: responseData.items,
                    };

                    generatePDF(paymentDetails, 'payment-receipt.pdf');
                    setTimeout(() => {
                        window.location.href = '/profile';
                    }, 2000);
                } catch (err) {
                    toast.error("Failed to update wallet: " + err.message);
                }
                setLoading(false); 
            };

            window.payhere.onDismissed = function () {
                console.log("Payment dismissed");
                setModalOpen(true); // Open the modal when dismissed
                setLoading(false); 
            };

            window.payhere.onError = function (error) {
                toast.error("Error occurred. " + error);
                console.log("Error: " + error);
                setLoading(false); 
                setTimeout(() => {
                    window.location.href = '/profile';
                }, 2000);
            };

            window.payhere.startPayment(payment);
        } catch (error) {
            console.log("Error fetching payment data:", error);
            setLoading(false); 
        }
    };

    useImperativeHandle(ref, () => ({
        initiatePayment
    }));

    const handleConfirm = () => {
        setModalOpen(false);
        
    };

    const handleCancel = () => {
        setModalOpen(false);
        window.location.href = '/profile'; 
    };

    return (
        <>
            {isModalOpen && (
                <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
                    <div className="bg-white rounded-lg shadow-lg p-6 max-w-sm w-full">
                        <h2 className="text-lg font-semibold mb-4">Do you still want to pay?</h2>
                        <div className="flex justify-between">
                            <button 
                                onClick={handleConfirm} 
                                className={`bg-green-500 text-white font-semibold py-2 px-4 rounded hover:bg-green-600 transition duration-200 ${loading ? "opacity-50 cursor-not-allowed" : ""}`}
                                disabled={loading}
                            >
                                Yes
                            </button>
                            <button 
                                onClick={handleCancel} 
                                className="bg-red-500 text-white font-semibold py-2 px-4 rounded hover:bg-red-600 transition duration-200"
                            >
                                No
                            </button>
                        </div>
                    </div>
                </div>
            )}
        </>
    );
});

PaymentGateway.displayName = 'PaymentGateway';

export default PaymentGateway;
